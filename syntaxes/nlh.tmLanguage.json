{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "numlab-highlight-extension",
	"displayName": "NumLab Highlight Extension",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#class-declaration"
		},
		{
			"include": "#function-declaration"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line.number-sign.nlh",
					"begin": "#",
					"end": "\\n"
				},
				{
					"name": "comment.block.nlh",
					"begin": "/\\*",
					"end": "\\*/"
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.nlh",
					"match": "\\b(\\d+(\\.(?=\\d+))?)"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.flow.nlh",
					"match": "\\b(if|else|elif|while|for|return|yield|break|continue|pass)\\b"
				},
				{
					"name": "constant.language.nlh",
					"match": "\\b(True|False|None|NotImplemented)\\b"
				},
				{
					"name": "storage.type.structure.nlh",
					"match": "\\b(lambda)\\b"
				},
				{
					"name": "keyword.exception.handling.nlh",
					"match": "\\b(try|except|raise|finally|assert|with)\\b"
				},
				{
					"name": "keyword.import.handling.nlh",
					"match": "\\b(import|from|as)\\b"
				},
				{
					"name": "keyword.variable.handling.nlh",
					"match": "\\b(del|global)\\b"
				},
				{
					"name": "keyword.language.numlab.nlh",
					"match": "\\b(conf|begsim|endsim|resetstats)\\b"
				},
				{
					"include": "#builtin-exceptions"
				},
				{
					"include": "#builtin-functions"
				},
				{
					"include": "#builtin-types"
				}
			]
		},
		"builtin-exceptions": {
			"patterns": [
				{
					"name" : "support.type.exception.error.nlh",
					"match": "\\b((\\b(Arithmetic|Assertion|Attribute|EOF|FloatingPoint|Import|Indentation|Index|Key|Lookup|Memory|Name|NotImplemented|OS|Overflow|Reference|Runtime|Syntax|Tab|System|Type|UnboundLocal|Unicode|UnicodeEncode|UnicodeDecode|UnicodeTranslate|Value|ZeroDivision))Error)\\b"
				},
				{
					"name": "support.type.exception.nlh",
					"match": "\\b(Exception|GeneratorExit|KeyboardInterrupt|StopIteration|SystemExit)\\b"
				}
			]
		},
		"builtin-functions": {
			"patterns": [
				{
					"name": "support.function.builtin.nlh",
					"match": "\\b(abs|all|any|ascii|bin|bool|bytearray|bytes|callable|chr|classmethod|compile|complex|delattr|dict|dir|divmod|enumerate|eval|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|isinstance|issubclass|iter|len|list|locals|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|vars|zip)\\b"
				},
				{
					"name": "keyword.function.nlh",
					"match": "\\b(exec|print)\\b"
				}
			]
		},
		"builtin-types": {
			"patterns": [
				{
					"name": "support.type.numeric.nlh",
					"match": "\\b(int|complex|float|long)\\b"
				},
				{
					"name": "support.type.boolean.nlh",
					"match": "\\b(bool)\\b"
				},
				{
					"name": "support.type.text.nlh",
					"match": "\\b(str)\\b"
				},
				{
					"name": "support.type.collection.nlh",
					"match": "\\b(tuple|list|dict|set)\\b"
				},
				{
					"name": "support.type.others.nlh",
					"match": "\\b(object|bytes)\\b"
				}
			]
		},
		"class-declaration": {
			"name": "meta.class.nlh",
			"begin": "\\b(class)\\b",
			"end": "(:|\n)",
			"beginCaptures": {
				"1": 
				{
					"name": "storage.type.class.nlh"
				}
			},
			"endCaptures": {
				"1": 
				{
					"name": "puntuation.section.class.begin.nlh"	
				}
			},
			"patterns": [
				{
					"name": "entity.name.type.class.nlh",
					"match": "([a-zA-Z])+"
				}
			]
		},
		"function-declaration": {
			"name": "meta.function.nlh",
			"begin": "\\b(def)\\b",
			"end": "(:|\n)",
			"beginCaptures": {
				"1": 
				{
					"name": "storage.type.function.nlh"
				}
			},
			"endCaptures": {
				"1": 
				{
					"name": "puntuation.section.function.begin.nlh"	
				}
			},
			"patterns": [
				{
					"comment": "function-name",
					"name": "entity.name.function.nlh",
					"match": "([a-zA-Z])+"
				},
				{
					"comment": "function-args",
					"name": "meta.function.args.nlh",
					"begin": "(\\()",
					"end": "(\\))",
					"beginCaptures": {
						"1": 
						{
							"name": "punctuation.definition.parameters.begin.nlh"
						}
					},
					"endCaptures": {
						"1":
						{
							"name": "punctuation.definition.parameters.end.nlh"
						}
					},
					"patterns": [
						{
							"include": "#keywords"
						},
						{
							"include": "#operators"
						},
						{
							"name": "variable.parameter.function.nlh",
							"match": "([a-zA-Z0-9])+"
						}
					]
				},
				{
					"comment": "function-return-value",
					"begin": "(->)", 
					"end": "(:)",
					"beginCaptures": {
						"1": 
						{
							"name": "punctuation.separator.annotation.nlh"
						}
					},
					"patterns": [
						{
							"match": "."
						}
					]
				}
			]
		},
		"operators": {
			"patterns": [	
				{
					"name": "keyword.operator.arithmetic.nlh",
					"match": "\\+|-|\\*|/|%"
				},
				{
					"name": "keyword.operator.assignment.nlh",
					"match": "="
				},
				{
					"name": "keyword.operator.bitabit.nlh",
					"match": "&|\\||\\^|~|>>|<<"
				},
				{
					"name": "keyword.operator.relational.nlh",
					"match": ">|<|!="
				},
				{
					"name": "keyword.operator.logical.nlh",
					"match": "\\b(and|or|not)\\b"
				},
				{
					"name": "keyword.operator.belonging.nlh",
					"match": "\\b(in)\\b"
				},
				{
					"name": "keyword.operator.identity.nlh",
					"match": "\\b(is)\\b"
				}
			]
		},
		"strings": {
			"name": "string.quoted.nlh",
			"begin": "\"|'",
			"end": "\"|'|\n",
			"patterns": [
				{
					"name": "constant.character.escape.nlh",
					"match": "\\\\."
				}
			]
		}
	},
	"scopeName": "source.nlh"
}